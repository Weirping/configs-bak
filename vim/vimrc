" ===============================================================
" ======================快捷键约定===============================
" ===============================================================
" m             mark leader
" mx            mark with 'x'
" 'x            goto mark 'x'
" m,            Place Next Mark
" m.            Toggle Mark At Line
" md            Delete Mark
" m<Space>      Purge all Marks
" m?            List Buffer Markers
" 



" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
set nocompatible              " required
filetype off                  " required
" Plugs ----------------------------------------- {{{
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" Specify a directory for plugins
" Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
" Make sure you use single quotes
Plug 'vim-airline/vim-airline'                           " 在top显示buf
Plug 'vim-airline/vim-airline-themes'                    " airline主题
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}     " 文件树形结构
Plug 'jistr/vim-nerdtree-tabs', {'on': 'NERDTreeToggle'} " nerdtree 调用
Plug 'kien/ctrlp.vim'                                    " 超级搜索 按Ctrl+P就可以进行搜索
Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}  " C++ 语法高亮配色方案, 需要配置 syntax on
Plug 'Yggdroot/indentLine'                               " 显示缩进线
Plug 'vim-scripts/indentpython.vim', {'for': 'python'}   " python 自动缩进插件,用于insert过程时自动缩进,需要配置 indent on
Plug 'vim-python/python-syntax', {'for': 'python'}       " python syntax highlight
Plug 'vim-syntastic/syntastic'                           " 语法检查框架, 其中包含了常用语言检查工具,少量语言需手动安装插件
Plug 'Chiel92/vim-autoformat'                            " 代码格式化框架,依赖对应语言格式化插件
Plug 'maralla/completor.vim'                             " 代码智能补全框架
"Plug 'Valloric/YouCompleteMe'                          " 代码智能完成
Plug 'SirVer/ultisnips'                                  " 模块自动补全插件 如 if--else--, 集成到completor.vim
Plug 'Weirping/vim-snippets'                             " ultisnips需要用到的各种模板,下载后ultisnips自动识别. 自己fork一份,方便定制, src: honza/vim-snippets
Plug 'scrooloose/nerdcommenter'                          " 注释
Plug 'mbbill/undotree'                                   " 文件保存历史
Plug 'vim-scripts/TaskList.vim'                          " TODOList
Plug 'vim-scripts/taglist.vim'                           " taglist
Plug 'ervandew/supertab'                                 " 用tab自动完成,此插件与ultisnips有冲突,需配置
Plug 'dyng/ctrlsf.vim'                                   " 在工程中查找关键词的插件
Plug 'terryma/vim-multiple-cursors'                      " 光标多选功能
Plug 'easymotion/vim-easymotion'                         " 快速移动光标
Plug 'tpope/vim-surround'                                " surroud
Plug 'junegunn/vim-easy-align'                           " align
Plug 'mhinz/vim-signify'                                 " svn git 修改标记
Plug 'skywind3000/asyncrun.vim'                          " asyncrun
Plug 'kshenoy/vim-signature'                             " code bookmark, echo has('signs') = 1
Plug 'liuchengxu/vim-which-key'                          " key guide
Plug 'simeji/winresizer'                                 " window resize

" Initialize plugin system
call plug#end()
" }}}


" filetype settings ----------------------------- {{{
" 文件类型侦测。允许基于不同语言加载不同插件（如，C++ 的语法高亮插件与 python 的不同）：
filetype on "开启文件类型检查
filetype plugin on " 开启插件支持
filetype indent on " 自动适应不同语言的智能缩进
" }}} 


" 常规配置项 settings --------------------------- {{{
" 让配置变更立即生效
" autocmd BufWritePost $MYVIMRC source $MYVIMRC
let mapleader=';'                   " 快捷键 <leader>
set noswapfile                      "无备份文件
set report=0                        " 通过使用: commands命令，告诉我们文件的哪一行被改变过
" }}} 


" vim-which-guide ------------------------------{{{
set timeout
set timeoutlen=500
let g:which_key_map =  {}  
call which_key#register(';', "g:which_key_map")
nnoremap <silent> <leader>      :<c-u>WhichKey ';'<CR>
vnoremap <silent> <leader>      :<c-u>WhichKey ';'<CR>
let g:which_key_map = {
            \ '1': 'buffer1',
            \ '2': 'buffer2',
            \ '3': 'buffer3',
            \ '4': 'buffer4',
            \ '5': 'buffer5',
            \ '6': 'buffer6',
            \ '7': 'buffer7',
            \ '8': 'buffer8',
            \ '9': 'buffer9',
            \ 'a': 'Align',
            \ 'w': 'window [Resize][Move][Focus]'
            \ }
let g:which_key_map.b = {
            \ 'name': '+buffer',
            \ 'd': 'DeleteBuffer',
            \ '?': ['ls', 'ListBuf'] 
            \  }
let g:which_key_map.c = {
            \ 'name': '+Comment',
            \ ' ': 'CommenterToggle',
            \ 'A': 'CommentAppendTail',
            \ 'c': 'CommentComment',
            \ 'i': 'CommentInvert',
            \ 'l': 'CommentAlignLeft',
            \ '$': 'CommentToEOL'
            \}
let g:which_key_map.e = {
            \ 'name' : '+EpenInSplit',
            \ 'v' : 'Vimrc',
            \ 'b' : '%',
            \ 'e' : 'Bashrc',
            \ 'h' : {
            \ 'name' : '+HistSplit',
            \ 'v' : 'Vimrc',
            \ 'b' : '%',
            \ 'e' : 'Bashrc',
            \  }
            \ }
let g:which_key_map.f = {
            \ 'name': '+FindFile',
            \ 'p': 'FindinProject'
            \  }
let g:which_key_map.s = {
            \ 'name': '+Search',
            \ 'f': 'Char',
            \ 'l': 'Line',
            \ 's': 'CharChar',
            \ 'w': 'Word'
            \}
let g:which_key_map.t = {
            \ 'name': '+toggle',
            \ 'n': 'LineNumber',
            \ 'p': 'PasteMode',
            \ 'h': 'close search highlight',
            \ 'w': 'LineWrap'
            \}
" }}}


" autocmd --------------------------------------- {{{
augroup run_file
    autocmd!
    autocmd FileType python nnoremap <F5>  :w<CR>:copen<cr><C-W><C-P>:AsyncRun -raw python % <cr>
    autocmd FileType python nnoremap <C-c> :AsyncStop!<cr>
    autocmd FileType cpp    nnoremap <F9>  :w<CR>:copen<cr><C-W><C-P>:AsyncRun gcc -lstdc++ % -o %< <CR>
    autocmd FileType cpp    nnoremap <F5>  :copen<cr><C-W><C-P>:AsyncRun -raw ./%< <CR>
    autocmd FileType cpp    nnoremap <C-c> :AsyncStop!<cr>
    autocmd FileType sh     nnoremap <F5>  :w<CR>:copen<cr><C-W><C-P>:AsyncRun sh % <cr>
    autocmd FileType sh     nnoremap <C-c> :AsyncStop!<cr>
augroup end
" }}}


" my key mapping settings ----------------------- {{{
" open => e
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>ehv :split $MYVIMRC<cr>
nnoremap <leader>eb :vsplit %<cr>
nnoremap <leader>ehb :split %<cr>
nnoremap <leader>ee :vsplit ~/.bashrc<cr>
nnoremap <leader>ehe :split ~/.bashrc<cr>
" toggle => t
nnoremap <leader>tn :set number!<cr>    " toggle number
nnoremap <leader>tp :set paste!<cr>
nnoremap <leader>tw :set wrap!<cr>
" }}}


" encoding settings ----------------------------- {{{
set fileformat=unix                 "设置以unix的格式保存文件
set fileencoding=utf-8              "文件编码
set encoding=utf-8                  "支持UTF-8编码
" }}} 


" tab indent settings --------------------------- {{{
" 代码缩进
set smartindent                     " vim提供4种自动缩进类型indenttype。autoindent、smartindent、cindent、indentexpr,用于自动调节代码缩进
set smarttab                        " 行首 insert时根据 'shiftwidth'.  'tabstop' or 'softtabstop' 使用空格插入tab，删除时根据shiftwidth删除tab
set expandtab                       "把制表符转换为多个空格，具体空格数量参考 tabstop 和 shiftwidth 变量
set tabstop=4                       "insert时tab键4个空格
set softtabstop=4                   "delete时 按删除键的时候 如果遇到tab出来的4空格，则直接删除4个空格（与tabstop对应）
set shiftwidth=4                    "格式化 其他文件 时tab占用的空格数
" 可以使用  retab  对别人的代码进行格式化（如果别人的缩进和以上配置不一样时）
set backspace =indent,eol,start         " Make backspace work as you would expect. 此处不可跨行

" >>>>>
" indentLine
" F1 缩进线开关
noremap <F1> :IndentLinesToggle<CR>
let g:indentLine_char='┆'
let g:indentLine_enabled = 1            "显示缩进线
" }}} 


" folding settings ------------------------------ {{{
" 代码折叠（Code Folding)
set foldmethod=indent    " 根据缩进折叠代码
augroup folding_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" set foldmethod=syntax   " 根据语法折叠
set foldlevel=99
" nnoremap <space> za     "使用空格键折叠代码
" zM		Close all folds
" zR		Open all folds
" }}}


" colorscheme settings -------------------------- {{{
set t_Co=256            " 设置颜色深度, 终端支持256colors
set background=dark
" colorscheme solarized
colorscheme desert
" }}}

 
" syntax highlight settings --------------------- {{{
" 语法高亮 以下两行代码要在靠前的位置，后面所有关于颜色的配置都需要在这两行之后
syntax enable                   "开启代码高亮功能
syntax on                       "允许用指定的语法高亮配色方案代替默认方案,如python,cpp文件使用不同的方案
" >>>
" python-syntax
let python_highlight_all=1
" }}} 


" edit scope settings --------------------------- {{{
set number                 " 显示行号
augroup line_number_vim
    autocmd!
    autocmd FileType qf  setlocal nonumber
augroup END
set textwidth=110          " 限制以后文本的长度
"set relativenumber number " 显示相对行号
"set cursorline            " 突出显示当前行
"set cursorcolumn          " 突出显示当前列
set ruler                  " 总是显示光标当前位置
set nowrap                 " 禁止折行
augroup wrap_vim
    autocmd!
    autocmd FileType qf  setlocal wrap
augroup END

" 标示不必要的空白字符
highlight BadWhitespace ctermbg=239 guibg=darkred
auto BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
" }}}


" status-line airline settings ------------------ {{{
" status line
set laststatus=2                    " 总是显示状态栏
set showmode                        " 显示当前的模式

" buf
set hidden                                  " Switch between buffers without having to save first.
" ls                                         "查看打开的文件:
" :b filename                                "打开缓冲区中的文件
" buf 跳转
nmap <leader>bd :bdelete%<CR>

" >>>>>
" airline
" airline集成的扩展
let g:airline_extensions = ['tabline', 'ctrlp', 'syntastic']

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.whitespace = 'Ξ'

" tabline plugin config
let g:airline#extensions#tabline#enabled = 1                "在顶端显示buf
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#buffer_idx_mode = 1        "show buf index
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <s-tab> <Plug>AirlineSelectPrevTab
nmap <tab>  <Plug>AirlineSelectNextTab

" enable syntastic integration
let g:airline#extensions#syntastic#enabled = 1
" }}}


" search, easymotion settings ------------------- {{{
set incsearch                       "在搜索时，逐字符高亮. Highlight while searching with / or ?.
set ignorecase                      "ignore case 搜索时忽略大小写
set hlsearch                        "hlsearch 高亮显示搜索结果
" 关闭搜索高亮
nnoremap <silent> <leader>th :nohlsearch<CR>  
" 修改Search结果的高亮配色方案
" hi Search ctermfg=230 ctermbg=33 guifg=#fdf6e3 guibg=#268bd2

" >>>>>
" easymotion
let g:EasyMotion_do_mapping = 0         "关闭默认keymapping, 只使用自定义的
" <Leader>sf{char} to move to {char}
map  <Leader>sf <Plug>(easymotion-bd-f)
nmap <Leader>sf <Plug>(easymotion-overwin-f)
" <leader>ss{char}{char} to move to {char}{char}
nmap <leader>ss <Plug>(easymotion-overwin-f2)
" Move to word
map  <Leader>sw <Plug>(easymotion-bd-w)
nmap <Leader>sw <Plug>(easymotion-overwin-w)
" Move to line
map  <Leader>sl <Plug>(easymotion-bd-jk)
nmap <Leader>sl <Plug>(easymotion-overwin-line)
" }}}


" cmd line settings ----------------------------- {{{
" Command Mode下输入 : 进入末行模式Last line Mode
set display=lastline                " Show as much as possible of the last line.
set wildmenu                        " visual autocomplete for command menu
set showcmd                         " 输入的命令显示出来，看的清楚些
" }}}


" window start ---------------------------------- {{{
" 窗口分割位置
set splitbelow
set splitright
" 窗口跳转
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" winresizer
let g:winresizer_start_key = '<leader>w'
" }}}


" syntastic settings ---------------------------- {{{
" 语法检查 
let g:syntastic_always_populate_loc_list = 1    "error window if error exist
let g:syntastic_auto_loc_list = 0               "error window automatically opened when errors are detected, and closed when none are detected
let g:syntastic_check_on_open = 1               "check when open and save
let g:syntastic_check_on_wq = 0                 "disable checking before quit vim
" let g:syntastic_python_checkers=['pep8', 'pyflakes']
let g:syntastic_python_checkers=['pep8']
let g:syntastic_python_pep8_args='--ignore=E501,E116,E127'
let g:syntastic_enable_highlighting = 0         "关闭正文中的error, warning高亮
" }}}


" autoformat settings --------------------------- {{{
" F7自动格式化代码并保存
noremap <F7> :Autoformat<CR>:w<CR>
" let g:autoformat_verbosemode=1                  " verbose mode 调试autoformat时用
" python
let g:formatters_python = ['yapf']              "定义用于python格式化的插件yapf, 各python env 需要手动安装 pip install yapf  # python自动格式化工具
let g:formatter_yapf_style = 'pep8'             "yapf使用pep8风格格式化python代码
" cpp clangformat
let g:formatdef_clangformat = "'clang-format -lines='.a:firstline.':'.a:lastline.' --assume-filename=\"'.expand('%:p').'\" -style=\"{BasedOnStyle: google, SortIncludes: false, AccessModifierOffset: -2, '.(&textwidth ? 'ColumnLimit: '.&textwidth.', ' : '').(&expandtab ? 'UseTab: Never, IndentWidth: '.shiftwidth() : 'UseTab: Always').'}\"'"
" }}}

" completer settings ---------------------------- {{{
"completor 配置
let g:completor_min_chars = 1                   " 输入一个字符即开始智能提示
let g:completor_doc_position = 'bottom'         " 在窗口底部显示文档
let g:completor_auto_close_doc = 0              " 不自动关闭doc窗口

" YCM 配置
"let g:ycm_complete_in_comments=1                " 补全功能在注释中同样有效
"let g:ycm_confirm_extra_conf=0                  " 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
"let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 标签补全引擎
"set tags+=~/.vim/tags/cpp                       " 引入 C++ 标准库tags
"inoremap <leader>; <C-x><C-o>
"set completeopt=longest,menu,preview            " 补全内容不以分割子窗口形式出现，只显示补全列表
"let g:ycm_min_num_of_chars_for_completion=1     " 从第一个键入字符就开始罗列匹配项
"let g:ycm_cache_omnifunc=0                      " 禁止缓存匹配项，每次都重新生成匹配项
"let g:ycm_seed_identifiers_with_syntax=1        " 语法关键字补全
"let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
"nnoremap <leader>jd :YcmCompleter GoToDeclaration <CR>
"nnoremap <leader>jf :YcmCompleter GoToDefinition<CR>
"nnoremap <leader>jt :YcmCompleter GetType<CR>
"nnoremap <leader>jp :YcmCompleter GetParent<CR>
"nnoremap <leader>jk :YcmCompleter GetDoc<CR>

" supertab
let g:SuperTabDefaultCompletionType = "<C-N>"   "将tab键映射为completor.vim的自动完成
" ultisnips
let g:UltiSnipsExpandTrigger = "<nop>"          "与supertab不兼容, 修改默认键
inoremap <expr> <CR> pumvisible() ? "\<c-y><C-R>=UltiSnips#ExpandSnippetOrJump()<CR>" : "\<CR>"
let g:UltiSnipsJumpForwardTrigger="<tab>"       "跳转到下一个placeholder
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"    "上一个placeholder
" }}}


" nerdcommenter settings ------------------------ {{{
" 多行注释只需要在normal模式下按v并移动光标选择需要注释的行
" <leader>ci  "toggle comment
" }}}


" plugin config settings ------------------------ {{{
" CtrlP settings
let g:ctrlp_match_window = 'bottom,order:ttb'   "order matching files top to bottom
let g:ctrlp_switch_buffer = 0                   "always open files in new buffer
let g:ctrlp_working_path_mode = 0


" NERDTree
" F2开启和关闭树"
map <F2> :NERDTreeToggle<CR>
let NERDTreeChDirMode=1
" 显示书签"
let NERDTreeShowBookmarks=1
" 设置忽略文件类型"
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
" 窗口大小"
let NERDTreeWinSize=25

" gundo
" j/k   上下选择
" p     查看diff
" 回车  回滚文件到这个时刻的版本
" <leader>h  关闭(或者wq关闭gundo打开的窗口)
nnoremap <F4> :UndotreeToggle<CR>
let g:undotree_WindowLayout="Style 1"
" 打开文件是默认同时打开undotree
" auto BufRead,BufNewFile * UndotreeToggle

" TaskList
let g:tlTokenList = ["FIXME", "TODO", "WARN"]
let g:tlWindowPosition = 1
let g:tlRememberPosition = 1
map <F12> <Plug>TaskList

" taglist
let Tlist_Show_One_File=1            " 不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow=1          " 如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Ctags_Cmd="/usr/bin/ctags" " 将taglist与ctags关联
nnoremap <silent> <F3> :TlistToggle<CR>

" CtrlSF
let g:ctrlsf_winsize = '60%'  " 设置ctrlsf窗口占当前串口的百分比
" find in project
nnoremap <leader>fp :CtrlSF<CR>
nnoremap <F6> :CtrlSFToggle <CR>
let g:ctrlsf_context = '-B 0 -A 0'
let g:ctrlsf_default_root = 'project'
" 针对 blade 编译数据 和 protobuffer 编译数据. ingnore
"let g:ctrlsf_ignore_dir = ['blade-bin', 'build64_release']
let g:ctrlsf_auto_focus = {"at" : "start"}


" vim-easy-align
" Start interactive EasyAlign
xmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)

" signify
let g:signify_vcs_list              = [ 'git', 'svn' ]
let g:signify_cursorhold_insert     = 0
let g:signify_cursorhold_normal     = 0
let g:signify_update_on_bufenter    = 0
let g:signify_update_on_focusgained = 0

" vim-signature
let g:SignatureMap = {
    \ 'Leader'             :  "m",
    \ 'PlaceNextMark'      :  "m,",
    \ 'ToggleMarkAtLine'   :  "m.",
    \ 'DeleteMark'         :  "md",
    \ 'PurgeMarks'         :  "m<Space>",
    \ 'ListBufferMarkers'  :  "m?"
    \ }
" }}}


" function -------------------------------------- {{{
" 新建python文件 自动插入头文件
augroup file_create
    autocmd!
    autocmd BufNewFile * execute ":call SetTitle()" 
    autocmd BufNewFile * :normal! G
augroup end
func! SetTitle()
    if &filetype == 'sh'
        call setline(1,"\#!/bin/bash")
        call append(line("."),"\# coding: utf-8")
        call append(line(".")+1, "\# ========================================================================")
        call append(line(".")+2, "\# File Name: ".expand("%"))
        call append(line(".")+3, "\# Author: Weiping")
        call append(line(".")+4, "\# Created Time: ".strftime("%c"))
        call append(line(".")+5, "\# =======================================================================")
    endif
    if &filetype == 'python'
        call setline(1,"\#!/usr/bin/evn python")
        call append(line("."),"\# coding: utf-8")
        call append(line(".")+1, "\# ========================================================================")
        call append(line(".")+2, "\# File Name: ".expand("%"))
        call append(line(".")+3, "\# Author: Weiping")
        call append(line(".")+4, "\# Created Time: ".strftime("%c"))
        call append(line(".")+5, "\# =======================================================================")
    endif
    if &filetype == 'cpp'
        call setline(1, "/*************************************************************************")
        call append(line("."), "    > File Name: ".expand("%"))
        call append(line(".")+1, "    > Author: Weiping")
        call append(line(".")+2, "    > Created Time: ".strftime("%c"))
        call append(line(".")+3, " ************************************************************************/")
        call append(line(".")+4, "")
    endif
endfunc
" }}}


" 一些快捷键 settings --------------------------- {{{
" <C-O> 返回上一个（停留过）位置
" <C-T> 返回上一个（停留过）tag
" <C-i> 调到下一个（停留过）位置
" }}}


" dependency settings --------------------------- {{{
"
" 新建一个新的 conda environment 时需要按钻的插件如下
" pip install pep8 pyflakes yapf jedi pygments
"
" syntastic
" pip install pep8 pyflakes  #python 语法检查工具

" vim-autoformat
" pip install yapf  # python自动格式化工具
" llvm 安装         # c++ 代码格式化

" completor
" pip install jedi  # python 语义智能完成

" ctrlsf
" 由于CtrlSF依赖于ack 所以需要先安装ack
" mkdir ~/bin
" curl https://beyondgrep.com/ack-2.22-single-file > ~/bin/ack && chmod 0755 ~/bin/ack
" }}}
" 


" ======= 收藏 以后研究 ======= "

" 加载自定义工程配置文件 
"if g:isWIN
    "if filereadable($VIM.'/_self.vim')
        "source $VIM/_self.vim
    "end
"else
    "if filereadable($HOME.'/.self.vim')
        "source $HOME/.self.vim
    "end
"end 
