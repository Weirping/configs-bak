"===============================================================
"======================快捷键约定===============================
"===============================================================
" <leader>s     cursor move
" <leader>t     toggle
" <leader>f     files search. eg var word in files


" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
set nocompatible              " required
filetype off                  " required
"====================Vundle start=====================================
":BundleList              -列举列表(也就是.vimrc)中配置的所有插件
":BundleInstall          -安装列表中的全部插件
":BundleInstall!         -更新列表中的全部插件
":BundleSearch foo   -查找foo插件
":BundleSearch! foo  -刷新foo插件缓存
":BundleClean           -清除列表中没有的插件

" set the runtime path to include Vundle and initialize
" mkdir -p ~/.vim/bundle
" git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
Plugin 'tmhedberg/SimpylFold'               "用于代码折叠
Plugin 'vim-airline/vim-airline'            " 在top显示buf
Plugin 'vim-airline/vim-airline-themes'     "airline主题
Plugin 'powerline/powerline'                "用于美化状态栏 默认被airline接管,不单独配置
Plugin 'scrooloose/nerdtree'                "文件树形结构
Plugin 'jistr/vim-nerdtree-tabs'            "
Plugin 'kien/ctrlp.vim'                     "超级搜索 按Ctrl+P就可以进行搜索
Plugin 'octol/vim-cpp-enhanced-highlight'   " C++ 语法高亮配色方案, 需要配置 syntax on
Plugin 'Yggdroot/indentLine'                "显示缩进线
Plugin 'vim-scripts/indentpython.vim'       "python 自动缩进插件,用于insert过程时自动缩进,需要配置 indent on
Plugin 'vim-syntastic/syntastic'            "语法检查框架, 其中包含了常用语言检查工具,少量语言需手动安装插件
Plugin 'Chiel92/vim-autoformat'             "代码格式化框架,依赖对应语言格式化插件
Plugin 'maralla/completor.vim'              "代码智能补全框架
Plugin 'SirVer/ultisnips'                   "模块自动补全插件 如 if--else--, 集成到completor.vim
"Plugin 'honza/vim-snippets'                 "ultisnips需要用到的各种模板（ultisnips没有自带的模板，下载后ultisnips自动识别）
Plugin 'Weirping/vim-snippets'              "自己fork一份,方便定制
Plugin 'jiangmiao/auto-pairs'               "自动补全括号
Plugin 'scrooloose/nerdcommenter'           "注释
Plugin 'mbbill/undotree'                    "文件保存历史
Plugin 'vim-scripts/TaskList.vim'           "TODOList
Plugin 'ervandew/supertab'                  "用tab自动完成,此插件与ultisnips有冲突,需配置
Plugin 'dyng/ctrlsf.vim'                    "在工程中查找关键词的插件
Plugin 'terryma/vim-multiple-cursors'       " 光标多选功能
Plugin 'easymotion/vim-easymotion'          "快速移动光标
Plugin 'haya14busa/incsearch.vim'           "搜索功能增强

" All of your Plugins must be added before the following line
call vundle#end()            " required
"====================Vundle end========================================


"====================文件类型检测 start================================
"文件类型侦测。允许基于不同语言加载不同插件（如，C++ 的语法高亮插件与 python 的不同）：
filetype on "开启文件类型检查
filetype plugin on " 开启插件支持
filetype indent on " 自动适应不同语言的智能缩进
"====================文件类型检测 end================================


"====================常规配置项 start==================================
" 让配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC
let mapleader=';'                   " 快捷键 <leader>
set noswapfile                      "无备份文件
set textwidth=110                   "限制以后文本的长度
set report=0                        " 通过使用: commands命令，告诉我们文件的哪一行被改变过
"====================常规配置项 end=====================================

"====================key mapping start==================================
" open .vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
"====================key mapping end==================================

"====================encoding start==================================
set fileformat=unix                 "设置以unix的格式保存文件
set fileencoding=utf-8              "文件编码
set encoding=utf-8                  "支持UTF-8编码
"====================encoding end=====================================


"====================tab indent start==================================
" 代码缩进
set smartindent                     " vim提供4种自动缩进类型indenttype。autoindent、smartindent、cindent、indentexpr,用于自动调节代码缩进
set smarttab                        " 行首 insert时根据 'shiftwidth'.  'tabstop' or 'softtabstop' 使用空格插入tab，删除时根据shiftwidth删除tab
set expandtab                       "把制表符转换为多个空格，具体空格数量参考 tabstop 和 shiftwidth 变量
set tabstop=4                       "insert时tab键4个空格
set softtabstop=4                   "delete时 按删除键的时候 如果遇到tab出来的4空格，则直接删除4个空格（与tabstop对应）
set shiftwidth=4                    "格式化 其他文件 时tab占用的空格数
" 可以使用  retab  对别人的代码进行格式化（如果别人的缩进和以上配置不一样时）
set backspace =indent,eol,start         " Make backspace work as you would expect. 此处不可跨行

">>>>>
"indentLine
"F1 缩进线开关
noremap <F1> :IndentLinesToggle<CR>
let g:indentLine_char='┆'
let g:indentLine_enabled = 1            "显示缩进线
"====================tab indent end==================================


"=================== code folding start==============================
"代码折叠（Code Folding)
set foldmethod=indent    " 根据缩进折叠代码
"set foldmethod=syntax   " 根据语法折叠
set foldlevel=99
let g:SimpylFold_docstring_preview=1 "显示doc
nnoremap <space> za     "使用空格键折叠代码
"=================== code folding end==============================


"====================配色方案 start======================================
set t_Co=256            " 设置颜色深度, 终端支持256colors
set background=dark
"colorscheme solarized
colorscheme desert
"====================配色方案 end====================================

 
"====================编辑区显示设置 start==================================
set number                          "显示行号
"set relativenumber number           "显示相对行号
"set cursorline                      "突出显示当前行
"set cursorcolumn                    "突出显示当前列
set ruler                           "总是显示光标当前位置
"set nowrap                          " 禁止折行
set wrap                            " 折行

"标示不必要的空白字符
highlight BadWhitespace ctermbg=239 guibg=darkred
auto BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
"====================编辑区显示设置 end====================================


"====================状态栏 缓冲区 airline start==================================
"status line
set laststatus=2                    " 总是显示状态栏
set showmode                        "显示当前的模式

" buf
set hidden                                  " Switch between buffers without having to save first.
"ls                                         "查看打开的文件:
":b filename                                "打开缓冲区中的文件
"buf 跳转
nmap <leader>bd :bdelete%<CR>

" >>>>>
"airline
" airline集成的扩展
let g:airline_extensions = ['tabline', 'ctrlp', 'syntastic']

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.whitespace = 'Ξ'

" tabline plugin config
let g:airline#extensions#tabline#enabled = 1                "在顶端显示buf
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#buffer_idx_mode = 1        "show buf index
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <s-tab> <Plug>AirlineSelectPrevTab
nmap <tab>  <Plug>AirlineSelectNextTab

" enable/disable syntastic integration
let g:airline#extensions#syntastic#enabled = 1
"====================状态栏 缓冲区 airline end====================================


"====================search start==================================
set incsearch                       "在搜索时，逐字符高亮. Highlight while searching with / or ?.
set ignorecase                      "ignore case 搜索时忽略大小写
set hlsearch                        "hlsearch 高亮显示搜索结果
" 修改Search结果的高亮配色方案
"hi Search ctermfg=230 ctermbg=33 guifg=#fdf6e3 guibg=#268bd2

">>>>>
"incsearch
let g:incsearch#auto_nohlsearch = 1     "完成搜索时自动取消高亮
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
"====================search end====================================


"====================cmd line start==================================
" Command Mode下输入 : 进入末行模式Last line Mode
set display=lastline                " Show as much as possible of the last line.
set wildmenu                        " visual autocomplete for command menu
set showcmd                         " 输入的命令显示出来，看的清楚些
"====================cmd line end====================================


"==============================窗口 start ==========================================
"窗口分割位置
set splitbelow
set splitright
"窗口跳转
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" 窗口大小调整
nmap z- :resize -5<CR>
nmap z= :resize +5<CR>
nmap z, :vertical resize -5<CR>
nmap z. :vertical resize +5<CR>
"==============================窗口 start ==========================================


"=============================语法高亮 start============================================
"语法高亮 以下两行代码要在靠前的位置，后面所有关于颜色的配置都需要在这两行之后
syntax enable                   "开启代码高亮功能
syntax on                       "允许用指定的语法高亮配色方案代替默认方案,如python,cpp文件使用不同的方案
let python_highlight_all=1
"=============================语法高亮 start============================================


"=======================syntastic 语法检查 start============================================
let g:syntastic_always_populate_loc_list = 1    "error window if error exist
let g:syntastic_auto_loc_list = 0               "error window automatically opened when errors are detected, and closed when none are detected
let g:syntastic_check_on_open = 1               "check when open and save
let g:syntastic_check_on_wq = 0                 "disable checking before quit vim
"let g:syntastic_python_checkers=['pep8', 'pyflakes']
let g:syntastic_python_checkers=['pep8']
let g:syntastic_python_pep8_args='--ignore=E501,E116'
let g:syntastic_enable_highlighting = 0         "关闭正文中的error, warning高亮
"=======================syntastic 语法检查 end============================================


"=============================代码格式化 start================================================
"F7自动格式化代码并保存
noremap <F7> :Autoformat<CR>:w<CR>
"let g:autoformat_verbosemode=1                  " verbose mode 调试autoformat时用
"python
let g:formatters_python = ['yapf']              "定义用于python格式化的插件yapf, 各python env 需要手动安装 pip install yapf  # python自动格式化工具
let g:formatter_yapf_style = 'pep8'             "yapf使用pep8风格格式化python代码
"cpp clangformat
let g:formatdef_clangformat = "'clang-format -lines='.a:firstline.':'.a:lastline.' --assume-filename=\"'.expand('%:p').'\" -style=\"{BasedOnStyle: google, AccessModifierOffset: -2, '.(&textwidth ? 'ColumnLimit: '.&textwidth.', ' : '').(&expandtab ? 'UseTab: Never, IndentWidth: '.shiftwidth() : 'UseTab: Always').'}\"'"
"=============================代码格式化 end================================================


"=============================智能补全 start================================================
"<C-n> next
"<C-p> pre
"<C-y> select
set completeopt=longest,menu,preview            " 补全内容不以分割子窗口形式出现，只显示补全列表

">>>>>

"completor
let g:completor_min_chars = 1                   " 输入一个字符即开始智能提示
let g:completor_doc_position = 'bottom'         " 在窗口底部小时文档
let g:completor_auto_close_doc = 0              " 不自动关闭doc窗口

"supertab
let g:SuperTabDefaultCompletionType = "<C-N>"   "将tab键映射为completor.vim的自动完成
"ultisnips
let g:UltiSnipsExpandTrigger = "<nop>"          "与supertab不兼容, 修改默认键
inoremap <expr> <CR> pumvisible() ? "\<c-y><C-R>=UltiSnips#ExpandSnippetOrJump()<CR>" : "\<CR>"
let g:UltiSnipsJumpForwardTrigger="<tab>"       "跳转到下一个placeholder
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"    "上一个placeholder
"=============================智能补全 end================================================


"=============================nerdcommenter start ========================================
"多行注释只需要在normal模式下按v并移动光标选择需要注释的行
"<leader>ci  "toggle comment
"=============================nerdcommenter start ========================================


"=============================插件config start============================================
" CtrlP settings
let g:ctrlp_match_window = 'bottom,order:ttb'   "order matching files top to bottom
let g:ctrlp_switch_buffer = 0                   "always open files in new buffer
let g:ctrlp_working_path_mode = 0
"let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""' "change the working directory during a Vim session and make CtrlP respect that change

"NERDTree====================
"F2开启和关闭树"
map <F2> :NERDTreeToggle<CR>
let NERDTreeChDirMode=1
"显示书签"
let NERDTreeShowBookmarks=1
"设置忽略文件类型"
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
"窗口大小"
let NERDTreeWinSize=25
"打开文件是默认同时打开目录树
"autocmd BufRead,BufNewFile * NERDTreeToggle

"gundo=======================
"j/k   上下选择
"p     查看diff
"回车  回滚文件到这个时刻的版本
"<leader>h  关闭(或者wq关闭gundo打开的窗口)
nnoremap <F4> :UndotreeToggle<CR>
let g:undotree_WindowLayout="Style 1"
"打开文件是默认同时打开undotree
"auto BufRead,BufNewFile * UndotreeToggle

"TaskList====================
let g:tlTokenList = ["FIXME", "TODO", "WARN"]
let g:tlWindowPosition = 1
let g:tlRememberPosition = 1
map <F12> :TaskList<CR>

" CtrlSF=====================
let g:ctrlsf_winsize = '30%'  " 设置ctrlsf窗口占当前串口的百分比
" find in project
nnoremap <leader>fp :CtrlSF<CR>
nnoremap <F6> :CtrlSFToggle <CR>

"easymotion=================
let g:EasyMotion_do_mapping = 0         "关闭默认keymapping, 只使用自定义的
" <Leader>sf{char} to move to {char}
map  <Leader>sf <Plug>(easymotion-bd-f)
nmap <Leader>sf <Plug>(easymotion-overwin-f)
" <leader>ss{char}{char} to move to {char}{char}
nmap <leader>ss <Plug>(easymotion-overwin-f2)
" Move to word
map  <Leader>sw <Plug>(easymotion-bd-w)
nmap <Leader>sw <Plug>(easymotion-overwin-w)
" Move to line
map <Leader>sl <Plug>(easymotion-bd-jk)
nmap <Leader>sl <Plug>(easymotion-overwin-line)
"=============================插件config start============================================


"================================function==========================================
"新建python文件 自动插入头文件
autocmd BufNewFile *.py,*.cpp exec ":call SetTitle()"
func! SetTitle()
    if &filetype == 'sh'
        call setline(1,"\#!/bin/bash")
        call append(line("."),"\# coding: utf-8")
        call append(line(".")+1, "\# ========================================================================")
        call append(line(".")+2, "\# File Name: ".expand("%"))
        call append(line(".")+3, "\# Author: Weiping")
        call append(line(".")+4, "\# Created Time: ".strftime("%c"))
        call append(line(".")+5, "\# =======================================================================")
    endif
    if &filetype == 'python'
        call setline(1,"\#!/usr/bin/evn python")
        call append(line("."),"\# coding: utf-8")
        call append(line(".")+1, "\# ========================================================================")
        call append(line(".")+2, "\# File Name: ".expand("%"))
        call append(line(".")+3, "\# Author: Weiping")
        call append(line(".")+4, "\# Created Time: ".strftime("%c"))
        call append(line(".")+5, "\# =======================================================================")
    endif
    if &filetype == 'cpp'
        call setline(1, "/*************************************************************************")
        call append(line("."), "    > File Name: ".expand("%"))
        call append(line(".")+1, "    > Author: Weiping")
        call append(line(".")+2, "    > Created Time: ".strftime("%c"))
        call append(line(".")+3, " ************************************************************************/")
        call append(line(".")+4, "")
    endif
    autocmd BufNewFile * normal G
endfunc


"toggle between number and relativenumber
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

"按F5运行python"
map <F5> :call CompileRunFunc()<CR>
func! CompileRunFunc()
    exec "w"
    if &filetype == 'python'
        exec "!time python %"
    elseif &filetype == 'c'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'sh'
        exec "!time bash %"
    endif
endfunc
"============================config end=============================================


"====================一些快捷键 start======================================
" <C-O> 返回上一个（停留过）位置
" <C-T> 返回上一个（停留过）tag
" <C-i> 调到下一个（停留过）位置

"====================一些快捷键 end======================================


"======================依赖的外部软件 start=====================================
"syntastic
"pip install pep8 pyflakes  #python 语法检查工具

"vim-autoformat
"pip install yapf  # python自动格式化工具
"llvm 安装         # c++ 代码格式化

"completor
"pip install jedi  # python 语义智能完成

" ctrlsf
" 由于CtrlSF依赖于ack 所以需要先安装ack
" mkdir ~/bin
" curl https://beyondgrep.com/ack-2.22-single-file > ~/bin/ack && chmod 0755 ~/bin/ack
